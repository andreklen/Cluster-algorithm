// Fuzzy K-means.

dtt=distanciacentroide;
distanciacentroide=dtt;

[nldisd, ncdisd]=size(distanciacentroide);

it=0;
while t<l;// Inicio do While


// cálculo de uij

// cálculo de uij i: número de amostras; j número de clusters
   // distanciacentroide=dtt;
    
       
      
    for i=1:nldisd;
        
         soma=0;
        
        for j=1:ncdisd;

              soma=soma+(1/distanciacentroide(i,j))^(1/(m-1));// substituir 2 po m 
              
            end
           
       
        
        total(i)=soma;// soma das distâncias de cada amostra aos clusters
        end
        
    
    
     //calculo da matriz uij fuzzy
    
    for i=1:nldisd;
    
        for j=1:ncdisd;
 
            ufuzzy(i,j)=(1/distanciacentroide(i,j))^(1/(m-1))/(total(i));   // fuzzy completa
   // ufuzzy=abs(ufuzzy)
    
    end
    
end

       u=ufuzzy;


                Scentroidel=centrost(matriz,ufuzzy);// Calcula os novos centros e recebe os centros atualizados. 

// calculo  da distância em relação aos centrados calculados acima

 
        distanciacentroide2=dist(matriz,Scentroidel);// nova matriz de distâncias

                distanciacentroide=funczero(distanciacentroide2);
  
  
                 Scentroide=Scentroidel;
  
                     [nlc,ncc]=size(Scentroide);
  
                        for i=1:nlc;
    
       
                            centrof(i,1)=100;
                                    end
 
    centro=angulos(Scentroidel); // testar essa linha enviar apenas os cossenos diretores
        centroidef=cat(2,centro,centrof);

                Centros=ceil([Centros;centro]);// todos os centros gerados

// cálculo do critério de parada

   erro=abs(Up-u);


   erromax=max(erro);
it=it+1; // number of iteration 

        

  if erromax <erros then  break
      else Up=u;
 end



t=t+1;


end // fim do while





// alocação

for i=1:nldisd;
                    
                    for j=1:ncdisd;

                        
                            if max(u(i,1:ncdisd))== 0 then
                                grupos(i)=0;
                            else
                                                    
                        if max(u(i,1:ncdisd)) == u(i,j) then
                            
                            grupos(i)=j;
                            
                                                        
                           end
                        end
                            
                           
                    end
    
    
end


Grupos=[Grupos,grupos];
clusters=cat(2,dados(:,[1:2]),grupos);

// medidas de validação

 exec('C:\FFKM\medidas.sce'); 

 



